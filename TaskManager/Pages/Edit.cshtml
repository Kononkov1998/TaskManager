@page
@model TaskManager.Pages.Tasks.EditModel
@{
    ViewData["Title"] = Resources.Strings.EditTitle;
}

<h2>@ViewData["Title"]</h2>

<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Task.ID" />
            <input type="hidden" asp-for="PreviousStatus" />
            <input type="hidden" asp-for="Task.IsMainTask" />
            <input type="hidden" asp-for="Task.RegistrationDate" />
            <div class="form-group">
                <label asp-for="Task.Name" class="control-label">@Resources.Strings.Name</label>
                <input asp-for="Task.Name" class="form-control" />
                <span asp-validation-for="Task.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Task.Description" class="control-label">@Resources.Strings.Description</label>
                <input asp-for="Task.Description" class="form-control" />
                <span asp-validation-for="Task.Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Task.Perfomers" class="control-label">@Resources.Strings.Perfomers</label>
                <input asp-for="Task.Perfomers" class="form-control" />
                <span asp-validation-for="Task.Perfomers" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Task.Status" class="control-label">@Resources.Strings.Status</label>
                <select asp-for="Task.Status" class="form-control">
                    @foreach (var option in Models.Task.possibleStatuses)
                    {
                        <option>@option</option>
                    }
                </select>
                <span asp-validation-for="Task.Status" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Task.PlannedLeadTime" class="control-label">@Resources.Strings.PlannedLeadTime</label>
                <input asp-for="Task.PlannedLeadTime" class="form-control" />
                <span asp-validation-for="Task.PlannedLeadTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Task.ActualLeadTime" class="control-label">@Resources.Strings.ActualLeadTime</label>
                <input asp-for="Task.ActualLeadTime" class="form-control" />
                <span asp-validation-for="Task.ActualLeadTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Task.CompletionDate" class="control-label">@Resources.Strings.CompletionDate</label>
                <input asp-for="Task.CompletionDate" class="form-control" />
                <span asp-validation-for="Task.CompletionDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="@Resources.Strings.SaveChanges" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-page="Tasks">@Resources.Strings.BackToList</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // переопределение валидации на стороне клиента
        $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(",", ".");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        }

        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        }
    </script>
}

